/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';

import { ApiBase } from 'src/app/api/api-base';

import { CustomHttpUrlEncodingCodec } from '../encoder';

import { RegisteredActionsForDayDTO } from '../model/registeredActionsForDayDTO';

import { Configuration } from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class RegisteredActionsService extends ApiBase{
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        private httpClient: HttpClient,
        @Optional() configuration: Configuration) {
        super();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    public async apiRegisteredActionsGetRegisteredActionsDetailsGet(count?: number, lastActionDisplayedId?: string, ): Promise<Array<RegisteredActionsForDayDTO>> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (lastActionDisplayedId !== undefined && lastActionDisplayedId !== null) {
            queryParameters = queryParameters.set('lastActionDisplayedId', <any>lastActionDisplayedId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];


        let result = this.httpClient.get<Array<RegisteredActionsForDayDTO>>(`${this.basePath}/api/RegisteredActions/get-registered-actions-details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: this.checkUserAndCreateAuthHeaders(headers),
            }
        ).toPromise();

        return this.mapDates(result);
    }

}
